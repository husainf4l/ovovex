# Generated by Django 5.2.7 on 2025-10-08 08:27

import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('accounting', '0007_billline'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AIModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_name', models.CharField(max_length=100, unique=True)),
                ('model_type', models.CharField(choices=[('FORECASTING', 'Forecasting'), ('ANOMALY_DETECTION', 'Anomaly Detection'), ('CLASSIFICATION', 'Classification'), ('REGRESSION', 'Regression'), ('NLP', 'Natural Language Processing')], max_length=30)),
                ('version', models.CharField(max_length=20)),
                ('status', models.CharField(choices=[('TRAINING', 'Training'), ('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('DEPRECATED', 'Deprecated')], default='ACTIVE', max_length=20)),
                ('accuracy_score', models.DecimalField(blank=True, decimal_places=4, max_digits=5, null=True)),
                ('precision_score', models.DecimalField(blank=True, decimal_places=4, max_digits=5, null=True)),
                ('recall_score', models.DecimalField(blank=True, decimal_places=4, max_digits=5, null=True)),
                ('f1_score', models.DecimalField(blank=True, decimal_places=4, max_digits=5, null=True)),
                ('training_data_size', models.IntegerField(blank=True, null=True)),
                ('last_trained_at', models.DateTimeField(blank=True, null=True)),
                ('training_duration_hours', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('total_predictions', models.IntegerField(default=0)),
                ('successful_predictions', models.IntegerField(default=0)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('model_name', 'version')},
            },
        ),
        migrations.CreateModel(
            name='AnomalyDetectionModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_name', models.CharField(max_length=100, unique=True)),
                ('model_type', models.CharField(choices=[('STATISTICAL', 'Statistical'), ('MACHINE_LEARNING', 'Machine Learning'), ('RULE_BASED', 'Rule Based'), ('HYBRID', 'Hybrid')], max_length=20)),
                ('version', models.CharField(max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('total_alerts_generated', models.IntegerField(default=0)),
                ('true_positives', models.IntegerField(default=0)),
                ('false_positives', models.IntegerField(default=0)),
                ('true_negatives', models.IntegerField(default=0)),
                ('false_negatives', models.IntegerField(default=0)),
                ('sensitivity_threshold', models.DecimalField(decimal_places=2, default=Decimal('0.80'), max_digits=5)),
                ('specificity_threshold', models.DecimalField(decimal_places=2, default=Decimal('0.85'), max_digits=5)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('model_name', 'version')},
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_id', models.CharField(db_index=True, max_length=50, unique=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('document_type', models.CharField(choices=[('INVOICE', 'Invoice'), ('RECEIPT', 'Receipt'), ('CONTRACT', 'Contract'), ('STATEMENT', 'Financial Statement'), ('TAX_DOCUMENT', 'Tax Document'), ('LEGAL_DOCUMENT', 'Legal Document'), ('CORRESPONDENCE', 'Correspondence'), ('REPORT', 'Report'), ('OTHER', 'Other')], default='OTHER', max_length=20)),
                ('file_name', models.CharField(max_length=255)),
                ('file_path', models.FileField(upload_to='documents/%Y/%m/')),
                ('file_size', models.PositiveIntegerField(help_text='File size in bytes')),
                ('mime_type', models.CharField(max_length=100)),
                ('version', models.CharField(default='1.0', max_length=20)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('FINAL', 'Final'), ('ARCHIVED', 'Archived'), ('DELETED', 'Deleted')], default='FINAL', max_length=20)),
                ('is_confidential', models.BooleanField(default=False)),
                ('retention_period_years', models.IntegerField(default=7, help_text='Document retention period in years')),
                ('tags', models.CharField(blank=True, help_text='Comma-separated tags', max_length=500, null=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('edit_permissions', models.ManyToManyField(blank=True, help_text='Users who can edit this document', related_name='editable_documents', to=settings.AUTH_USER_MODEL)),
                ('last_modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modified_documents', to=settings.AUTH_USER_MODEL)),
                ('parent_document', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='versions', to='accounting.document')),
                ('related_account', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='documents', to='accounting.account')),
                ('related_bill', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='documents', to='accounting.bill')),
                ('related_customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='documents', to='accounting.customer')),
                ('related_invoice', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='documents', to='accounting.invoice')),
                ('related_vendor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='documents', to='accounting.vendor')),
                ('uploaded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploaded_documents', to=settings.AUTH_USER_MODEL)),
                ('view_permissions', models.ManyToManyField(blank=True, help_text='Users who can view this document', related_name='viewable_documents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='ComplianceCheck',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('check_id', models.CharField(db_index=True, max_length=50, unique=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('compliance_type', models.CharField(choices=[('SOX', 'Sarbanes-Oxley Act'), ('IFRS', 'International Financial Reporting Standards'), ('GAAP', 'Generally Accepted Accounting Principles'), ('TAX_COMPLIANCE', 'Tax Compliance'), ('DATA_PRIVACY', 'Data Privacy (GDPR/CCPA)'), ('INTERNAL_CONTROLS', 'Internal Controls'), ('INDUSTRY_SPECIFIC', 'Industry Specific')], max_length=20)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('IN_PROGRESS', 'In Progress'), ('COMPLIANT', 'Compliant'), ('NON_COMPLIANT', 'Non-Compliant'), ('EXEMPT', 'Exempt')], default='PENDING', max_length=20)),
                ('requirement_details', models.TextField(blank=True, null=True)),
                ('due_date', models.DateField(blank=True, null=True)),
                ('frequency', models.CharField(blank=True, help_text='Monthly, Quarterly, Annual, etc.', max_length=50, null=True)),
                ('risk_level', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('CRITICAL', 'Critical')], default='MEDIUM', max_length=20)),
                ('last_assessed_at', models.DateTimeField(blank=True, null=True)),
                ('assessment_notes', models.TextField(blank=True, null=True)),
                ('remediation_required', models.BooleanField(default=False)),
                ('remediation_plan', models.TextField(blank=True, null=True)),
                ('remediation_due_date', models.DateField(blank=True, null=True)),
                ('remediation_completed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assessed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='compliance_assessments', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('related_accounts', models.ManyToManyField(blank=True, related_name='compliance_checks', to='accounting.account')),
                ('related_documents', models.ManyToManyField(blank=True, related_name='compliance_checks', to='accounting.document')),
            ],
            options={
                'ordering': ['-due_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DocumentCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('color_code', models.CharField(default='#3498db', help_text='Hex color code for UI', max_length=7)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('parent_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subcategories', to='accounting.documentcategory')),
            ],
            options={
                'verbose_name_plural': 'Document Categories',
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='document',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='documents', to='accounting.documentcategory'),
        ),
        migrations.CreateModel(
            name='DocumentShare',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access_level', models.CharField(choices=[('VIEW', 'View Only'), ('COMMENT', 'View and Comment'), ('EDIT', 'Edit'), ('FULL', 'Full Access')], default='VIEW', max_length=20)),
                ('shared_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('message', models.TextField(blank=True, help_text='Message from sharer', null=True)),
                ('last_accessed_at', models.DateTimeField(blank=True, null=True)),
                ('access_count', models.PositiveIntegerField(default=0)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shares', to='accounting.document')),
                ('shared_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='shared_by_documents', to=settings.AUTH_USER_MODEL)),
                ('shared_with', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shared_documents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-shared_at'],
            },
        ),
        migrations.CreateModel(
            name='InventoryCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('parent_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subcategories', to='accounting.inventorycategory')),
            ],
            options={
                'verbose_name_plural': 'Inventory Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='InventoryItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_code', models.CharField(db_index=True, max_length=50, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('current_stock', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('minimum_stock', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('maximum_stock', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('reorder_point', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('unit_cost', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('selling_price', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('unit_of_measure', models.CharField(choices=[('EACH', 'Each'), ('KG', 'Kilogram'), ('LB', 'Pound'), ('LITER', 'Liter'), ('GALLON', 'Gallon'), ('METER', 'Meter'), ('FOOT', 'Foot'), ('SQUARE_METER', 'Square Meter'), ('CUBIC_METER', 'Cubic Meter'), ('BOX', 'Box'), ('CASE', 'Case'), ('PALLET', 'Pallet')], default='EACH', max_length=20)),
                ('vendor_item_code', models.CharField(blank=True, max_length=50, null=True)),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('barcode', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('serial_number_required', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_taxable', models.BooleanField(default=True)),
                ('total_value', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='items', to='accounting.inventorycategory')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('primary_vendor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='supplied_items', to='accounting.vendor')),
            ],
            options={
                'ordering': ['item_code'],
            },
        ),
        migrations.CreateModel(
            name='InventoryTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.CharField(choices=[('RECEIPT', 'Stock Receipt'), ('ISSUE', 'Stock Issue'), ('ADJUSTMENT', 'Stock Adjustment'), ('TRANSFER', 'Stock Transfer'), ('RETURN', 'Stock Return'), ('DAMAGE', 'Damage/Loss')], max_length=20)),
                ('quantity', models.DecimalField(decimal_places=2, max_digits=12)),
                ('unit_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('reference_number', models.CharField(blank=True, max_length=100, null=True)),
                ('from_location', models.CharField(blank=True, max_length=255, null=True)),
                ('to_location', models.CharField(blank=True, max_length=255, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='transactions', to='accounting.inventoryitem')),
                ('related_bill', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='inventory_transactions', to='accounting.bill')),
                ('related_invoice', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='inventory_transactions', to='accounting.invoice')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PurchaseOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('po_number', models.CharField(db_index=True, max_length=50, unique=True)),
                ('order_date', models.DateField(db_index=True)),
                ('required_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('PENDING_APPROVAL', 'Pending Approval'), ('APPROVED', 'Approved'), ('ORDERED', 'Ordered'), ('PARTIALLY_RECEIVED', 'Partially Received'), ('RECEIVED', 'Received'), ('CANCELLED', 'Cancelled'), ('CLOSED', 'Closed')], default='DRAFT', max_length=20)),
                ('subtotal', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15)),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15)),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15)),
                ('total_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15)),
                ('ship_to_address', models.TextField(blank=True, null=True)),
                ('shipping_method', models.CharField(blank=True, max_length=100, null=True)),
                ('shipping_cost', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('delivery_terms', models.TextField(blank=True, null=True)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('vendor_po_number', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_pos', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('requested_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='requested_pos', to=settings.AUTH_USER_MODEL)),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='purchase_orders', to='accounting.vendor')),
            ],
            options={
                'ordering': ['-order_date', '-po_number'],
            },
        ),
        migrations.CreateModel(
            name='PurchaseOrderLine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_description', models.CharField(max_length=255)),
                ('quantity_ordered', models.DecimalField(decimal_places=2, max_digits=12)),
                ('quantity_received', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=12)),
                ('line_total', models.DecimalField(decimal_places=2, max_digits=12)),
                ('expected_delivery_date', models.DateField(blank=True, null=True)),
                ('actual_delivery_date', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('inventory_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='po_lines', to='accounting.inventoryitem')),
                ('purchase_order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='accounting.purchaseorder')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='AIInsight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('insight_id', models.CharField(db_index=True, max_length=50, unique=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('insight_type', models.CharField(choices=[('REVENUE_OPTIMIZATION', 'Revenue Optimization'), ('COST_REDUCTION', 'Cost Reduction'), ('CASH_FLOW_IMPROVEMENT', 'Cash Flow Improvement'), ('RISK_WARNING', 'Risk Warning'), ('TREND_ANALYSIS', 'Trend Analysis'), ('PERFORMANCE_METRIC', 'Performance Metric'), ('COMPLIANCE_ALERT', 'Compliance Alert'), ('MARKET_INSIGHT', 'Market Insight')], max_length=30)),
                ('priority', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('CRITICAL', 'Critical')], default='MEDIUM', max_length=20)),
                ('confidence_score', models.DecimalField(decimal_places=2, help_text='AI confidence score (0-100)', max_digits=5)),
                ('impact_score', models.DecimalField(decimal_places=2, help_text='Potential impact score (0-100)', max_digits=5)),
                ('potential_savings', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_implemented', models.BooleanField(default=False)),
                ('implemented_date', models.DateField(blank=True, null=True)),
                ('feedback_rating', models.IntegerField(blank=True, help_text='User feedback rating (1-5)', null=True)),
                ('generated_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('ai_model_version', models.CharField(blank=True, max_length=50, null=True)),
                ('related_accounts', models.ManyToManyField(blank=True, related_name='ai_insights', to='accounting.account')),
                ('related_customers', models.ManyToManyField(blank=True, related_name='ai_insights', to='accounting.customer')),
                ('related_vendors', models.ManyToManyField(blank=True, related_name='ai_insights', to='accounting.vendor')),
            ],
            options={
                'ordering': ['-generated_at', '-priority'],
                'indexes': [models.Index(fields=['insight_type', 'priority'], name='accounting__insight_debb5c_idx'), models.Index(fields=['is_active', 'generated_at'], name='accounting__is_acti_c78c28_idx')],
            },
        ),
        migrations.CreateModel(
            name='AIPrediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prediction_id', models.CharField(db_index=True, max_length=50, unique=True)),
                ('title', models.CharField(max_length=255)),
                ('prediction_type', models.CharField(choices=[('REVENUE_FORECAST', 'Revenue Forecast'), ('EXPENSE_FORECAST', 'Expense Forecast'), ('CASH_FLOW_FORECAST', 'Cash Flow Forecast'), ('PROFIT_FORECAST', 'Profit Forecast'), ('BUDGET_VARIANCE', 'Budget Variance'), ('SEASONAL_TREND', 'Seasonal Trend'), ('MARKET_DEMAND', 'Market Demand')], max_length=30)),
                ('predicted_value', models.DecimalField(decimal_places=2, max_digits=15)),
                ('confidence_interval_lower', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('confidence_interval_upper', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('prediction_date', models.DateField()),
                ('forecast_period_months', models.IntegerField(default=1)),
                ('actual_value', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('accuracy_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('generated_at', models.DateTimeField(auto_now_add=True)),
                ('ai_model_version', models.CharField(blank=True, max_length=50, null=True)),
                ('related_account', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ai_predictions', to='accounting.account')),
            ],
            options={
                'ordering': ['-prediction_date', '-generated_at'],
                'indexes': [models.Index(fields=['prediction_type', 'prediction_date'], name='accounting__predict_77f9c6_idx')],
            },
        ),
        migrations.CreateModel(
            name='AnomalyAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_id', models.CharField(db_index=True, max_length=50, unique=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('anomaly_type', models.CharField(choices=[('TRANSACTION_AMOUNT', 'Unusual Transaction Amount'), ('FREQUENCY_SPIKE', 'Transaction Frequency Spike'), ('VENDOR_PATTERN', 'Unusual Vendor Pattern'), ('CUSTOMER_PATTERN', 'Unusual Customer Pattern'), ('ACCOUNT_BALANCE', 'Account Balance Anomaly'), ('BUDGET_VARIANCE', 'Budget Variance Anomaly'), ('CASH_FLOW_IRREGULARITY', 'Cash Flow Irregularity'), ('EXPENSE_SPIKE', 'Expense Spike'), ('REVENUE_DROP', 'Revenue Drop')], max_length=30)),
                ('severity', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('CRITICAL', 'Critical')], default='MEDIUM', max_length=20)),
                ('status', models.CharField(choices=[('DETECTED', 'Detected'), ('INVESTIGATING', 'Investigating'), ('RESOLVED', 'Resolved'), ('FALSE_POSITIVE', 'False Positive'), ('IGNORED', 'Ignored')], default='DETECTED', max_length=20)),
                ('detected_value', models.DecimalField(decimal_places=2, max_digits=15)),
                ('expected_value', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('deviation_percentage', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('confidence_score', models.DecimalField(decimal_places=2, max_digits=5)),
                ('investigation_notes', models.TextField(blank=True, null=True)),
                ('resolution_notes', models.TextField(blank=True, null=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('detected_at', models.DateTimeField(auto_now_add=True)),
                ('ai_model_version', models.CharField(blank=True, max_length=50, null=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_anomalies', to=settings.AUTH_USER_MODEL)),
                ('related_account', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='anomaly_alerts', to='accounting.account')),
                ('related_customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='anomaly_alerts', to='accounting.customer')),
                ('related_journal_entry', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='anomaly_alerts', to='accounting.journalentry')),
                ('related_vendor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='anomaly_alerts', to='accounting.vendor')),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_anomalies', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-detected_at', '-severity'],
                'indexes': [models.Index(fields=['status', 'severity'], name='accounting__status_0e74cb_idx'), models.Index(fields=['anomaly_type', 'detected_at'], name='accounting__anomaly_1fdce1_idx')],
            },
        ),
        migrations.CreateModel(
            name='AuditTrail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(choices=[('CREATE', 'Create'), ('UPDATE', 'Update'), ('DELETE', 'Delete'), ('VIEW', 'View'), ('EXPORT', 'Export'), ('IMPORT', 'Import'), ('APPROVE', 'Approve'), ('REJECT', 'Reject'), ('LOGIN', 'Login'), ('LOGOUT', 'Logout')], max_length=20)),
                ('entity_type', models.CharField(choices=[('ACCOUNT', 'Account'), ('JOURNAL_ENTRY', 'Journal Entry'), ('INVOICE', 'Invoice'), ('BILL', 'Bill'), ('CUSTOMER', 'Customer'), ('VENDOR', 'Vendor'), ('USER', 'User'), ('FIXED_ASSET', 'Fixed Asset'), ('BUDGET', 'Budget'), ('EXPENSE', 'Expense'), ('TAX_RETURN', 'Tax Return'), ('DOCUMENT', 'Document'), ('INVENTORY', 'Inventory'), ('PURCHASE_ORDER', 'Purchase Order'), ('OTHER', 'Other')], max_length=20)),
                ('entity_id', models.CharField(db_index=True, max_length=100)),
                ('entity_name', models.CharField(blank=True, max_length=255, null=True)),
                ('old_values', models.JSONField(blank=True, help_text='Previous values (JSON)', null=True)),
                ('new_values', models.JSONField(blank=True, help_text='New values (JSON)', null=True)),
                ('changes_description', models.TextField(blank=True, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('session_id', models.CharField(blank=True, max_length=100, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('success', models.BooleanField(default=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_actions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['user', 'timestamp'], name='accounting__user_id_5b6333_idx'), models.Index(fields=['entity_type', 'entity_id'], name='accounting__entity__06a867_idx'), models.Index(fields=['action_type', 'timestamp'], name='accounting__action__04e7cb_idx')],
            },
        ),
        migrations.CreateModel(
            name='ComplianceViolation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('violation_id', models.CharField(db_index=True, max_length=50, unique=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('severity', models.CharField(choices=[('MINOR', 'Minor'), ('MODERATE', 'Moderate'), ('MAJOR', 'Major'), ('CRITICAL', 'Critical')], default='MODERATE', max_length=20)),
                ('status', models.CharField(choices=[('OPEN', 'Open'), ('INVESTIGATING', 'Investigating'), ('REMEDIATED', 'Remediated'), ('CLOSED', 'Closed'), ('DISMISSED', 'Dismissed')], default='OPEN', max_length=20)),
                ('detected_at', models.DateTimeField(auto_now_add=True)),
                ('investigation_notes', models.TextField(blank=True, null=True)),
                ('root_cause', models.TextField(blank=True, null=True)),
                ('remediation_actions', models.TextField(blank=True, null=True)),
                ('preventive_measures', models.TextField(blank=True, null=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('financial_impact', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('regulatory_fine', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_violations', to=settings.AUTH_USER_MODEL)),
                ('compliance_check', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='violations', to='accounting.compliancecheck')),
                ('related_accounts', models.ManyToManyField(blank=True, related_name='compliance_violations', to='accounting.account')),
                ('reported_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reported_violations', to=settings.AUTH_USER_MODEL)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_violations', to=settings.AUTH_USER_MODEL)),
                ('related_documents', models.ManyToManyField(blank=True, related_name='compliance_violations', to='accounting.document')),
            ],
            options={
                'ordering': ['-detected_at', '-severity'],
                'indexes': [models.Index(fields=['status', 'severity'], name='accounting__status_061ec6_idx'), models.Index(fields=['compliance_check', 'status'], name='accounting__complia_5618a8_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='compliancecheck',
            index=models.Index(fields=['compliance_type', 'status'], name='accounting__complia_8d029b_idx'),
        ),
        migrations.AddIndex(
            model_name='compliancecheck',
            index=models.Index(fields=['due_date', 'status'], name='accounting__due_dat_8d1ad2_idx'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['document_type', 'status'], name='accounting__documen_8ef485_idx'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['category', 'uploaded_at'], name='accounting__categor_802720_idx'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['uploaded_by', 'uploaded_at'], name='accounting__uploade_93d444_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='documentshare',
            unique_together={('document', 'shared_with')},
        ),
        migrations.AddIndex(
            model_name='inventoryitem',
            index=models.Index(fields=['category', 'is_active'], name='accounting__categor_cfa5e7_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryitem',
            index=models.Index(fields=['current_stock', 'minimum_stock'], name='accounting__current_ea87c2_idx'),
        ),
        migrations.AddIndex(
            model_name='inventorytransaction',
            index=models.Index(fields=['item', 'created_at'], name='accounting__item_id_101441_idx'),
        ),
        migrations.AddIndex(
            model_name='inventorytransaction',
            index=models.Index(fields=['transaction_type', 'created_at'], name='accounting__transac_b9fe48_idx'),
        ),
        migrations.AddIndex(
            model_name='purchaseorder',
            index=models.Index(fields=['vendor', 'status'], name='accounting__vendor__77c213_idx'),
        ),
        migrations.AddIndex(
            model_name='purchaseorder',
            index=models.Index(fields=['status', 'order_date'], name='accounting__status_8de807_idx'),
        ),
    ]
