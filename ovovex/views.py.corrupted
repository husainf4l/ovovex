from django.shortcuts import render, redirect
from django.http import HttpResponse
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.models import User
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from decimal import Decimal
from accounting.models import JournalEntryLine
from django.db import models

# Import all missing view stubs
from .missing_views import *


def home(request):
    """
    Home page view
    """
    context = {
        "title": "Welcome to Ovovex",
        "description": "Your next-generation platform for innovative solutions.",
    }
    return render(request, "home.html", context)


def health_check(request):
    """
    Simple health check endpoint
    """
    return HttpResponse("OK", content_type="text/plain")


def login_view(request):
    """
    Login page view
    """
    if request.user.is_authenticated:
        return redirect("home")

    if request.method == "POST":
        username = request.POST.get("username")
        password = request.POST.get("password")

        if username and password:
            user = authenticate(request, username=username, password=password)
            if user is not None:
                login(request, user)
                messages.success(
                    request, f"Welcome back, {user.first_name or user.username}!"
                )
                next_url = request.GET.get("next", "home")
                return redirect(next_url)
            else:
                messages.error(request, "Invalid username or password.")
        else:
            messages.error(request, "Please fill in all fields.")

    context = {
        "title": "Login to Ovovex",
        "description": "Access your accounting dashboard and manage your finances.",
    }
    return render(request, "auth/login.html", context)


def signup_view(request):
    """
    Signup page view
    """
    # Allow viewing signup pages even when authenticated (they might want to see the page)
    # Only redirect on POST (actual signup attempt)
    if request.user.is_authenticated and request.method == "POST":
        messages.info(request, "You are already logged in.")
        return redirect("dashboard")

    if request.method == "POST":
        username = request.POST.get("username")
        email = request.POST.get("email")
        first_name = request.POST.get("first_name")
        last_name = request.POST.get("last_name")
        password = request.POST.get("password")
        password_confirm = request.POST.get("password_confirm")

        # Validation
        if not all(
            [username, email, first_name, last_name, password, password_confirm]
        ):
            messages.error(request, "Please fill in all fields.")
        elif password != password_confirm:
            messages.error(request, "Passwords do not match.")
        elif len(password) < 8:
            messages.error(request, "Password must be at least 8 characters long.")
        elif User.objects.filter(username=username).exists():
            messages.error(request, "Username already exists.")
        elif User.objects.filter(email=email).exists():
            messages.error(request, "Email already exists.")
        else:
            # Create user
            try:
                user = User.objects.create_user(
                    username=username,
                    email=email,
                    first_name=first_name,
                    last_name=last_name,
                    password=password,
                )
                # Log the user in after account creation
                login(request, user)
                messages.success(
                    request, f"Welcome to Ovovex, {user.first_name or user.username}! Your account has been created successfully."
                )
                return redirect("dashboard")  # Redirect to dashboard instead of login
            except Exception as e:
                messages.error(
                    request, "An error occurred while creating your account."
                )

    context = {
        "title": "Join Ovovex",
        "description": "Create your account and start managing your finances today.",
    }
    return render(request, "auth/signup.html", context)


def logout_view(request):
    """
    Logout view
    """
    logout(request)
    messages.success(request, "You have been logged out successfully.")
    return redirect("home")


@login_required
def dashboard_view(request):
    """
    Dashboard view for authenticated users
    """
    # Mock user for testing
    class MockUser:
        def __init__(self):
            self.username = "testuser"
            self.first_name = "Test"
            self.last_name = "User"
            self.email = "test@example.com"
        
        def get_full_name(self):
            return f"{self.first_name} {self.last_name}"
    
    context = {
        "title": "Dashboard",
        "description": "Your accounting dashboard and financial overview.",
        "user": MockUser(),
    }
    return render(request, "dashboard/dashboard.html", context)


# Core Accounting Views
@login_required
def general_ledger_view(request):
    """
    General Ledger view
    """
    from accounting.models import Account, JournalEntry, AccountType
    from django.db.models import Sum, Count
    from datetime import datetime, timedelta

    # Get filter parameters
    account_type_filter = request.GET.get("account_type", "all")

    # Get all accounts
    accounts = Account.objects.filter(is_active=True)
    if account_type_filter != "all":
        accounts = accounts.filter(account_type=account_type_filter)

    # Update balances for display
    for account in accounts:
        account.current_balance = account.get_balance()

    # Get statistics
    total_accounts = Account.objects.filter(is_active=True).count()

    # Journal entries this month
    current_month = datetime.now().replace(day=1).date()
    entries_this_month = JournalEntry.objects.filter(
        entry_date__gte=current_month, status="POSTED"
    ).count()

    # Unbalanced entries (draft or not balanced)
    unbalanced_entries = JournalEntry.objects.filter(status="DRAFT").count()

    # Recent journal entries
    recent_entries = JournalEntry.objects.filter(status="POSTED").order_by(
        "-entry_date", "-created_at"
    )[:5]

@login_required
def generate_tax_report_view(request):
    """
    Generate tax report view
    """
    from accounting.models import FixedAsset
    from decimal import Decimal
    from django.http import JsonResponse

    if request.method == 'POST':
        report_type = request.POST.get('report_type')
        year = int(request.POST.get('year', 2025))

        try:
            fixed_assets = FixedAsset.objects.filter(is_active=True)

            if report_type == 'form_4562':
                # Form 4562 - Depreciation and Amortization
                total_basis = Decimal('0.00')
                total_depreciation = Decimal('0.00')
                section_179_total = Decimal('0.00')

                for asset in fixed_assets:
                    total_basis += asset.purchase_cost

                    # Calculate current year depreciation
                    if asset.depreciation_method == 'STRAIGHT_LINE':
                        annual_depreciation = (asset.purchase_cost - asset.salvage_value) / asset.useful_life_years
                    else:
                        annual_depreciation = asset.purchase_cost * Decimal('0.2')

                    total_depreciation += annual_depreciation

                    # Section 179 deduction (simplified - assume eligible assets get deduction)
                    if asset.purchase_cost <= Decimal('1000000'):  # Section 179 limit
                        section_179_total += min(asset.purchase_cost, Decimal('1000000'))

                return JsonResponse({
                    'success': True,
                    'report_data': {
                        'form_4562': {
                            'total_basis': str(total_basis),
                            'total_depreciation': str(total_depreciation),
                            'section_179_deduction': str(section_179_total),
                            'year': year,
                        }
                    }
                })

            elif report_type == 'depreciation':
                # Depreciation Report
                assets_data = []
                total_basis = Decimal('0.00')
                total_depreciation = Decimal('0.00')
                total_book_value = Decimal('0.00')
                section_179_total = Decimal('0.00')

                for asset in fixed_assets:
                    # Calculate tax basis and current year depreciation
                    tax_basis = asset.purchase_cost
                    tax_book_value = tax_basis - asset.accumulated_depreciation

                    if asset.depreciation_method == 'STRAIGHT_LINE':
                        current_year_depreciation = (tax_basis - asset.salvage_value) / asset.useful_life_years
                    else:
                        current_year_depreciation = tax_basis * Decimal('0.2')

                    # Section 179 (simplified)
                    section_179 = min(tax_basis, Decimal('1000000')) if tax_basis <= Decimal('1000000') else Decimal('0.00')

                    assets_data.append({
                        'asset_code': asset.asset_code,
                        'name': asset.name,
                        'tax_basis': str(tax_basis),
                        'current_year_depreciation': str(current_year_depreciation),
                        'tax_book_value': str(tax_book_value),
                        'section_179': str(section_179),
                    })

                    total_basis += tax_basis
                    total_depreciation += current_year_depreciation
                    total_book_value += tax_book_value
                    section_179_total += section_179

                return JsonResponse({
                    'success': True,
                    'report_data': {
                        'assets': assets_data,
                        'totals': {
                            'total_basis': str(total_basis),
                            'total_depreciation': str(total_depreciation),
                            'total_book_value': str(total_book_value),
                            'section_179_total': str(section_179_total),
                        },
                        'year': year,
                    }
                })

            elif report_type == 'property_tax':
                # Property Tax Report
                total_assessed_value = Decimal('0.00')
                total_property_tax = Decimal('0.00')

                for asset in fixed_assets:
                    assessed_value = asset.purchase_cost  # Simplified
                    property_tax_rate = Decimal('0.01')  # 1%
                    property_tax = assessed_value * property_tax_rate

                    total_assessed_value += assessed_value
                    total_property_tax += property_tax

                return JsonResponse({
                    'success': True,
                    'report_data': {
                        'total_assessed_value': str(total_assessed_value),
                        'total_property_tax': str(total_property_tax),
                        'tax_rate': '1.0%',
                        'year': year,
                    }
                })

            else:
                return JsonResponse({'success': False, 'error': 'Invalid report type'})

        except Exception as e:
            return JsonResponse({'success': False, 'error': str(e)})

    return JsonResponse({'success': False, 'error': 'Invalid request method'})


@login_required
def customer_profile_view(request):
    """
    Customer profile update view
    """
    if request.method == "POST":
        # Handle profile update
        first_name = request.POST.get("first_name")
        last_name = request.POST.get("last_name")
        email = request.POST.get("email")

        user = request.user
        user.first_name = first_name
        user.last_name = last_name
        user.email = email
        user.save()

        messages.success(request, "Profile updated successfully!")
        return redirect("customer_profile")

    context = {
        "title": "Update Profile",
        "user": request.user,
    }
    return render(request, "modules/customer_profile.html", context)


@login_required
def customer_support_view(request):
    """
    Customer support center view
    """
    if request.method == "POST":
        # Handle support ticket submission
        subject = request.POST.get("subject")
        category = request.POST.get("category")
        description = request.POST.get("description")
        priority = request.POST.get("priority")

        # In a real system, you'd create a support ticket record
        # For now, just show success message
        messages.success(
            request,
            "Support ticket submitted successfully! Our team will contact you within 24 hours.",
        )
        return redirect("customer_support")

    context = {
        "title": "Support Center",
    }
    return render(request, "modules/customer_support.html", context)


@login_required
def customer_activity_view(request):
    """
    Customer activity history view
    """
    # Mock activity data - in a real system, this would come from a database
    activities = [
        {
            "id": 1,
            "type": "asset_access",
            "title": "Asset Portal Accessed",
            "description": "You viewed your fixed assets",
            "timestamp": "2025-10-07 10:30:00",
            "icon": "fas fa-cubes",
            "color": "blue",
        },
        {
            "id": 2,
            "type": "profile_update",
            "title": "Profile Updated",
            "description": "Contact information was updated successfully",
            "timestamp": "2025-10-06 14:20:00",
            "icon": "fas fa-user",
            "color": "green",
        },
        {
            "id": 3,
            "type": "support_ticket",
            "title": "Support Ticket Submitted",
            "description": "Asset maintenance request submitted",
            "timestamp": "2025-10-04 09:15:00",
            "icon": "fas fa-exclamation-triangle",
            "color": "purple",
        },
        {
            "id": 4,
            "type": "login",
            "title": "Account Login",
            "description": "Logged in from web browser",
            "timestamp": "2025-10-03 08:45:00",
            "icon": "fas fa-sign-in-alt",
            "color": "gray",
        },
        {
            "id": 5,
            "type": "asset_report",
            "title": "Asset Issue Reported",
            "description": "Reported maintenance issue for asset COMP-001",
            "timestamp": "2025-10-02 16:30:00",
            "icon": "fas fa-flag",
            "color": "red",
        },
    ]

    context = {
        "title": "Activity History",
        "activities": activities,
    }
    return render(request, "modules/customer_activity.html", context)


@login_required
def financial_ratios_view(request):
    """
    Financial ratios view
    """
    from accounting.models import Account, AccountType
    from decimal import Decimal

    # Get balance sheet data
    assets = Account.objects.filter(account_type=AccountType.ASSET, is_active=True)
    liabilities = Account.objects.filter(
        account_type=AccountType.LIABILITY, is_active=True
    )
    equity = Account.objects.filter(account_type=AccountType.EQUITY, is_active=True)

    total_assets = sum(acc.get_balance() for acc in assets)
    total_liabilities = sum(acc.get_balance() for acc in liabilities)
    total_equity = sum(acc.get_balance() for acc in equity)

    # Get income statement data
    revenue_accounts = Account.objects.filter(
        account_type=AccountType.REVENUE, is_active=True
    )
    expense_accounts = Account.objects.filter(
        account_type=AccountType.EXPENSE, is_active=True
    )

    total_revenue = sum(acc.get_balance() for acc in revenue_accounts)
    total_expenses = sum(acc.get_balance() for acc in expense_accounts)
    net_income = total_revenue - total_expenses

    # Calculate ratios
    ratios = {}

    # Liquidity ratios
    current_assets = sum(acc.get_balance() for acc in assets if acc.code < "1400")
    current_liabilities = sum(
        acc.get_balance() for acc in liabilities if acc.code < "2300"
    )

    ratios["current_ratio"] = (
        (current_assets / current_liabilities)
        if current_liabilities > 0
        else Decimal("0.00")
    )
    ratios["quick_ratio"] = ratios["current_ratio"]  # Simplified

    # Profitability ratios
    ratios["gross_margin"] = (
        ((total_revenue - total_expenses) / total_revenue * 100)
        if total_revenue > 0
        else Decimal("0.00")
    )
    ratios["net_margin"] = (
        (net_income / total_revenue * 100) if total_revenue > 0 else Decimal("0.00")
    )
    ratios["return_on_assets"] = (
        (net_income / total_assets * 100) if total_assets > 0 else Decimal("0.00")
    )
    ratios["return_on_equity"] = (
        (net_income / total_equity * 100) if total_equity > 0 else Decimal("0.00")
    )

    # Leverage ratios
    ratios["debt_to_equity"] = (
        (total_liabilities / total_equity) if total_equity > 0 else Decimal("0.00")
    )
    ratios["debt_ratio"] = (
        (total_liabilities / total_assets * 100)
        if total_assets > 0
        else Decimal("0.00")
    )

    context = {
        "title": "Financial Ratios",
        "description": "Key financial ratios and performance indicators.",
        "user": request.user,
        "ratios": ratios,
        "total_assets": total_assets,
        "total_liabilities": total_liabilities,
        "total_equity": total_equity,
        "net_income": net_income,
    }
    return render(request, "modules/financial_ratios.html", context)


@login_required
def calculate_ratios_api(request):
    """
    API endpoint to calculate financial ratios dynamically
    """
    from accounting.models import Account, AccountType
    from decimal import Decimal
    from django.http import JsonResponse

    try:
        # Get balance sheet data
        assets = Account.objects.filter(account_type=AccountType.ASSET, is_active=True)
        liabilities = Account.objects.filter(
            account_type=AccountType.LIABILITY, is_active=True
        )
        equity = Account.objects.filter(account_type=AccountType.EQUITY, is_active=True)

        total_assets = sum(acc.get_balance() for acc in assets)
        total_liabilities = sum(acc.get_balance() for acc in liabilities)
        total_equity = sum(acc.get_balance() for acc in equity)

        # Get income statement data
        revenue_accounts = Account.objects.filter(
            account_type=AccountType.REVENUE, is_active=True
        )
        expense_accounts = Account.objects.filter(
            account_type=AccountType.EXPENSE, is_active=True
        )

        total_revenue = sum(acc.get_balance() for acc in revenue_accounts)
        total_expenses = sum(acc.get_balance() for acc in expense_accounts)
        net_income = total_revenue - total_expenses

        # Calculate ratios
        ratios = {}

        # Liquidity ratios
        current_assets = sum(acc.get_balance() for acc in assets if acc.code < "1400")
        current_liabilities = sum(
            acc.get_balance() for acc in liabilities if acc.code < "2300"
